{"version":3,"sources":["Components/Timer/Timer.view.js","Components/Timer/Timer.controller.js","App.js","reportWebVitals.js","index.js"],"names":["Wrapper","styled","div","Countdown","Line","props","width","Button","button","TimerController","React","time","counter","setCounter","pause","setPause","startCountAnnounce","onTimePause","autostart","onTick","formatTime","timer","setInterval","step","clearInterval","onTimeEnd","onTimeStart","minutes","Math","floor","seconds","toFixed","onClick","App","className","console","log","timeLeft","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"26BAEO,IAAMA,EAAUC,IAAOC,IAAV,KAOPC,EAAYF,IAAOC,IAAV,KAMTE,EAAOH,IAAOC,IAAV,KAEJ,SAAAG,GAAK,OAAIA,EAAMC,SAKfC,EAASN,IAAOO,OAAV,KCnBJ,SAASC,EAAgBJ,GAAQ,IAAD,EACbK,WAAeL,EAAMM,MADR,mBACpCC,EADoC,KAC3BC,EAD2B,OAEjBH,YAAe,GAFE,mBAEpCI,EAFoC,KAE7BC,EAF6B,KAI3CL,aAAgB,kBAAMM,MAAsB,IAE5CN,aAAgB,WAIZ,GAHGI,GAASF,EAAU,GAClBP,EAAMY,cAEPZ,EAAMa,YAAcJ,EAAO,CACX,IAAZF,GACCG,GAAS,GAEbV,EAAMc,OAAOC,EAAWR,IACxB,IAAMS,EAAQT,EAAU,GAAKU,aAAY,WACrCT,EAAWD,EAAUP,EAAMkB,QAC5BlB,EAAMkB,MACT,OAAO,kBAAMC,cAAcH,OAEhC,CAACT,EAASP,EAAOS,IAEpBJ,aAAgB,kBAAM,WACH,IAAZE,GAAkBE,GACjBT,EAAMoB,gBAId,IAAMT,EAAqBX,EAAMqB,YAEjC,SAASN,EAAWT,GAChB,IAAMgB,EAAUC,KAAKC,MAAMlB,EAAO,KAC5BmB,GAAYnB,EAAO,IAAS,KAAMoB,QAAQ,GAEhD,MAAM,GAAN,OAAWJ,EAAU,GAAK,IAAM,IAAhC,OAAsCA,EAAtC,YAAkDG,EAAU,GAAK,IAAM,IAAvE,OAA6EA,GAUjF,OACI,eAAC9B,EAAD,WACI,cAACG,EAAD,UAAYiB,EAAWR,KACvB,cAACR,EAAD,CAAME,MAAQM,EAAUP,EAAMM,KAAQ,MACtC,cAACJ,EAAD,CAAQyB,QAXhB,WAII,OAHe,IAAZpB,GACCC,EAAWR,EAAMM,MAEdI,GAAUD,IAOb,SAAmCA,EAAQ,QAAU,aC3BlDmB,MApBf,WAAgB,IAAD,EACOvB,YAAe,GAA5BQ,EADM,sBAEER,WAAe,KAAvBC,EAFM,sBAGED,WAAe,KAAvBa,EAHM,oBAKb,OACE,qBAAKW,UAAU,MAAf,SACE,cAAC,EAAD,CACEf,OAAQ,SAACR,GAAD,OAAUwB,QAAQC,IAAI,0FAAsBzB,IACpDc,UAAW,kBAAMU,QAAQC,IAAI,6DAC7BV,YAAa,SAACW,GAAD,OAAcF,QAAQC,IAAI,2FACvCnB,YAAa,SAACoB,GAAD,OAAcF,QAAQC,IAAI,sFACvClB,UAAWA,EACXP,KAAMA,EACNY,KAAMA,OCNCe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a683ee26.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    background-color: #000000;\n    width: 80%;\n    margin: auto;\n    padding: 25px;\n`;\n\nexport const Countdown = styled.div`\n    color: #fdfdfd;\n    font-size: 80px;\n    font-family: Arial, Helvetica, sans-serif;\n`;\n\nexport const Line = styled.div`\n    background-color: #2bca2b;\n    width: ${props => props.width}%;\n    height: 40px;\n    transition: width .4s;\n`;\n    \nexport const Button = styled.button`\n    width: 100px;\n    height: 20px;\n    background-color:#81b4cc;\n    color: #000000; \n    margin-top: 20px;\n    outline: none;   \n`;\n\n","import * as React from \"react\";\nimport {Wrapper, Countdown, Line, Button} from './Timer.view';\n\nexport default function TimerController(props) {\n    const [counter, setCounter] = React.useState(props.time);\n    const [pause, setPause] = React.useState(false);\n\n    React.useEffect(() => startCountAnnounce(), []);\n\n    React.useEffect(() => {\n        if(pause && counter > 0) {\n            props.onTimePause();\n        }\n        if(props.autostart && !pause) {\n            if(counter === 0) {\n                setPause(true);                \n            }\n            props.onTick(formatTime(counter))\n            const timer = counter > 0 && setInterval(() => {\n                setCounter(counter - props.step);\n            }, props.step);\n            return () => clearInterval(timer);\n        }\n    }, [counter, props, pause]);\n\n    React.useEffect(() => () => {\n        if(counter === 0 && !pause) {\n            props.onTimeEnd();\n        }\n    })\n\n    const startCountAnnounce = props.onTimeStart;\n\n    function formatTime(time) {\n        const minutes = Math.floor(time / 60000);\n        const seconds = ((time % 60000) / 1000).toFixed(0);\n        \n        return `${(minutes < 10 ? \"0\" : \"\")}${minutes}:${(seconds < 10 ? \"0\" : \"\")}${seconds}`;\n    };\n\n    function stopStartToggle() {\n        if(counter === 0) {\n            setCounter(props.time)\n        }\n        return setPause(!pause);\n    };\n\n    return (\n        <Wrapper>\n            <Countdown>{formatTime(counter)}</Countdown>\n            <Line width={(counter / props.time) * 100} />\n            <Button onClick={stopStartToggle}>{pause ? 'Start' : 'Pause'}</Button>\n        </Wrapper>\n    )\n};\n","import * as React from 'react';\nimport './App.css';\nimport Timer from './Components/Timer/Timer.controller';\n\nfunction App() {\n  const [autostart] = React.useState(true);\n  const [time] = React.useState(10000);\n  const [step] = React.useState(1000);\n\n  return (\n    <div className=\"App\">\n      <Timer \n        onTick={(time) => console.log(\"Залишилось часу: \" + time)}\n        onTimeEnd={() => console.log(\"Час вийшов!\")}\n        onTimeStart={(timeLeft) => console.log(\"Таймер запущено!\")}\n        onTimePause={(timeLeft) => console.log(\"Таймер на паузі!\")}\n        autostart={autostart}\n        time={time}\n        step={step}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}